一种将对象和名字捆绑的技术，对象工厂负责生产出对象，这些对象都和唯一的名字绑在一起，外部资源可以通过名字获得某对象的引用

##########################################################################################
表Context.INITIAL_CONTEXT_FACTORY的值
========================================
名称				         服务提供程序工厂
========================================
文件系统				com.sun.jndi.fscontext.RefFSContextFactory
LDAP				com.sun.jndi.ldap.LdapCtxFactory
RMI					com.sun.jndi.rmi.registry.RegistryContextFactory
CORBA				com.sun.jndi.cosnaming.CNCtxFactory
DNS					com.sun.jndi.dns.DnsContextFactory
##########################################################################################


行分隔符在windows 下是 \r\n，在Linux下面是 \n， 在Mac下是 \r
路径分隔符在windows下是 \ ，在Linux下是 /
体使用中都可以达到访问路径的效果，只不过有一点小区别
正斜杠的话，一般在配置文件路径时，指向下一个路径只要使用一个
例如："c:/a/1.txt";
而反斜杠的话，在配置文件路径时，由于它本身在java中有特殊意义，作为转义符而存在，所以具体意义上的反斜杠要两个
例如："c\\a\\1.txt";这里的第一个反斜杠是作为转义符存在的，第二个才是真正意义上的反斜杠